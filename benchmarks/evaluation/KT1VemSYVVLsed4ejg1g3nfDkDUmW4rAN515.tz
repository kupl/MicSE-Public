parameter (or
            (or
              (or (or (set %addToWhitelist address) (pair %buyWithAltPayment nat nat))
                  (or (unit %default) (set %distribute address)))
              (or (or (address %removeFromWhitelist) (address %updateAdmin))
                  (or
                    (map %updateAltPayments nat
                                            (pair
                                              (pair %token (address %address)
                                                           (pair (nat %tokenId)
                                                                 (or %tokenType (unit %fa1)
                                                                                (unit %fa2))))
                                              (nat %price)))
                    (timestamp %updateLock))))
            (or
              (or
                (pair %updateSale
                  (pair %token (address %address)
                               (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                  (pair (nat %tokenDec)
                        (pair (mutez %price)
                              (pair (nat %saleSupply)
                                    (pair (nat %minAmount)
                                          (pair (nat %maxAmount)
                                                (pair (timestamp %startTime)
                                                      (pair (timestamp %endTime) (nat %lockFactor)))))))))
                (bool %updateWhitelistEnabled))
              (address %withdraw)));
storage (pair (big_map %metadata string bytes)
              (pair
                (pair %sale
                  (pair %token (address %address)
                               (pair (nat %tokenId) (or %tokenType (unit %fa1) (unit %fa2))))
                  (pair (nat %tokenDec)
                        (pair (mutez %price)
                              (pair
                                (map %altPayments nat
                                                  (pair
                                                    (pair %token (address %address)
                                                                 (pair (nat %tokenId)
                                                                       (or %tokenType (unit %fa1)
                                                                                      (unit %fa2))))
                                                    (nat %price)))
                                (pair (map %altBalances nat nat)
                                      (pair (nat %soldAmount)
                                            (pair (nat %saleSupply)
                                                  (pair (nat %minAmount)
                                                        (pair (nat %maxAmount)
                                                              (pair (timestamp %startTime)
                                                                    (pair (timestamp %endTime)
                                                                          (pair
                                                                            (timestamp %lockEndTime)
                                                                            (pair (nat %lockFactor)
                                                                                  (pair
                                                                                    (bool %whitelistEnabled)
                                                                                    (set %whitelist address)))))))))))))))
                (pair (big_map %ledger address (pair (nat %amount) (nat %amountLocked)))
                      (address %admin))));
code { LAMBDA
         (pair (pair address address) (pair (pair address (pair nat (or unit unit))) nat))
         operation
         { UNPAIR ;
           UNPAIR ;
           DIG 2 ;
           UNPAIR ;
           DUP ;
           GET 4 ;
           IF_LEFT
             { DROP ;
               CAR ;
               CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))) ;
               IF_NONE { PUSH string "CANNOT_INVOKE_FA1_TRANSFER" ; FAILWITH } {} ;
               PUSH mutez 0 ;
               DIG 3 ;
               DIG 4 ;
               DIG 4 ;
               SWAP ;
               PAIR ;
               SWAP ;
               PAIR ;
               TRANSFER_TOKENS }
             { DROP ;
               DUP ;
               CAR ;
               CONTRACT %transfer (list (pair (address %from_)
                                             (list %txs (pair (address %to_)
                                                             (pair (nat %token_id) (nat %amount)))))) ;
               IF_NONE { PUSH string "CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
               PUSH mutez 0 ;
               NIL (pair address (list (pair address (pair nat nat)))) ;
               DIG 5 ;
               NIL (pair address (pair nat nat)) ;
               DIG 7 ;
               DIG 6 ;
               GET 3 ;
               DIG 7 ;
               SWAP ;
               PAIR ;
               SWAP ;
               PAIR ;
               CONS ;
               SWAP ;
               PAIR ;
               CONS ;
               TRANSFER_TOKENS } } ;
       NIL operation ;
       LAMBDA
         (pair (big_map string bytes)
               (pair
                 (pair (pair address (pair nat (or unit unit)))
                       (pair nat
                             (pair mutez
                                   (pair
                                     (map nat (pair (pair address (pair nat (or unit unit))) nat))
                                     (pair (map nat nat)
                                           (pair nat
                                                 (pair nat
                                                       (pair nat
                                                             (pair nat
                                                                   (pair timestamp
                                                                         (pair timestamp
                                                                               (pair timestamp
                                                                                     (pair nat
                                                                                           (pair
                                                                                             bool
                                                                                             (set address)))))))))))))))
                 (pair (big_map address (pair nat nat)) address)))
         unit
         { GET 6 ; SENDER ; COMPARE ; NEQ ; IF { PUSH string "INVALID_ACCESS" ; FAILWITH } { PUSH unit Unit } } ;
       LAMBDA
         (pair address
               (pair (big_map string bytes)
                     (pair
                       (pair (pair address (pair nat (or unit unit)))
                             (pair nat
                                   (pair mutez
                                         (pair
                                           (map nat
                                                (pair (pair address (pair nat (or unit unit))) nat))
                                           (pair (map nat nat)
                                                 (pair nat
                                                       (pair nat
                                                             (pair nat
                                                                   (pair nat
                                                                         (pair timestamp
                                                                               (pair timestamp
                                                                                     (pair timestamp
                                                                                           (pair nat
                                                                                                 (pair
                                                                                                   bool
                                                                                                   (set address)))))))))))))))
                       (pair (big_map address (pair nat nat)) address))))
         (pair nat nat)
         { UNPAIR ; SWAP ; GET 5 ; SWAP ; GET ; IF_NONE { PUSH nat 0 ; PUSH nat 0 ; SWAP ; PAIR } {} } ;
       LAMBDA
         (pair nat
               (pair (big_map string bytes)
                     (pair
                       (pair (pair address (pair nat (or unit unit)))
                             (pair nat
                                   (pair mutez
                                         (pair
                                           (map nat
                                                (pair (pair address (pair nat (or unit unit))) nat))
                                           (pair (map nat nat)
                                                 (pair nat
                                                       (pair nat
                                                             (pair nat
                                                                   (pair nat
                                                                         (pair timestamp
                                                                               (pair timestamp
                                                                                     (pair timestamp
                                                                                           (pair nat
                                                                                                 (pair
                                                                                                   bool
                                                                                                   (set address)))))))))))))))
                       (pair (big_map address (pair nat nat)) address))))
         (pair (pair address (pair nat (or unit unit))) nat)
         { UNPAIR ;
           SWAP ;
           GET 3 ;
           GET 7 ;
           SWAP ;
           GET ;
           IF_NONE { PUSH string "INVALID_ALT_PAYMENT_ID" ; FAILWITH } {} } ;
       LAMBDA
         (pair address mutez)
         operation
         { UNPAIR ;
           CONTRACT unit ;
           IF_NONE { PUSH string "INVALID_DESTINATION" ; FAILWITH } {} ;
           SWAP ;
           UNIT ;
           TRANSFER_TOKENS } ;
       DIG 6 ;
       UNPAIR ;
       IF_LEFT
         { IF_LEFT
             { IF_LEFT
                 { DIG 2 ;
                   DROP ;
                   IF_LEFT
                     { DIG 2 ;
                       DIG 3 ;
                       DIG 6 ;
                       DROP 3 ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       DIG 3 ;
                       SWAP ;
                       EXEC ;
                       DROP ;
                       ITER { SWAP ;
                              PAIR ;
                              DUP ;
                              CAR ;
                              DUP ;
                              DUP ;
                              DUG 2 ;
                              GET 3 ;
                              DIG 2 ;
                              GET 3 ;
                              GET 28 ;
                              DIG 3 ;
                              CDR ;
                              PUSH bool True ;
                              SWAP ;
                              UPDATE ;
                              UPDATE 28 ;
                              UPDATE 3 } ;
                       SWAP ;
                       PAIR }
                     { DIG 4 ;
                       DIG 5 ;
                       DROP 2 ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP 3 ;
                       GET 3 ;
                       GET 19 ;
                       NOW ;
                       COMPARE ;
                       LT ;
                       IF { PUSH string "SALE_NOT_STARTED" ; FAILWITH } {} ;
                       DUP 3 ;
                       GET 3 ;
                       GET 21 ;
                       NOW ;
                       COMPARE ;
                       GT ;
                       IF { PUSH string "SALE_ENDED" ; FAILWITH } {} ;
                       PUSH bool False ;
                       DUP 4 ;
                       GET 3 ;
                       GET 28 ;
                       SENDER ;
                       MEM ;
                       COMPARE ;
                       EQ ;
                       PUSH bool True ;
                       DUP 5 ;
                       GET 3 ;
                       GET 27 ;
                       COMPARE ;
                       EQ ;
                       AND ;
                       IF { PUSH string "INVALID_BUYER" ; FAILWITH } {} ;
                       DUP 3 ;
                       GET 3 ;
                       GET 13 ;
                       DUP 4 ;
                       GET 3 ;
                       GET 11 ;
                       COMPARE ;
                       GE ;
                       IF { PUSH string "SOLD_OUT" ; FAILWITH } {} ;
                       PUSH nat 1 ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       COMPARE ;
                       LT ;
                       IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                       DUP 3 ;
                       DUP 3 ;
                       PAIR ;
                       DIG 4 ;
                       SWAP ;
                       EXEC ;
                       DUP ;
                       CDR ;
                       DUP 5 ;
                       GET 3 ;
                       GET 3 ;
                       DUP 4 ;
                       MUL ;
                       EDIV ;
                       IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                       CAR ;
                       DUP 5 ;
                       GET 3 ;
                       GET 13 ;
                       DUP 6 ;
                       GET 3 ;
                       GET 11 ;
                       DUP 3 ;
                       ADD ;
                       COMPARE ;
                       GT ;
                       IF
                         { DIG 2 ;
                           DROP 2 ;
                           DUP 3 ;
                           GET 3 ;
                           GET 11 ;
                           DUP 4 ;
                           GET 3 ;
                           GET 13 ;
                           SUB ;
                           ABS ;
                           DUP 4 ;
                           GET 3 ;
                           GET 3 ;
                           DUP 3 ;
                           CDR ;
                           DUP 3 ;
                           MUL ;
                           EDIV ;
                           IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                           CAR ;
                           PAIR }
                         { DIG 2 ; PAIR } ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP 5 ;
                       SENDER ;
                       PAIR ;
                       DIG 6 ;
                       SWAP ;
                       EXEC ;
                       DUP 6 ;
                       GET 3 ;
                       GET 15 ;
                       DUP 3 ;
                       DUP 3 ;
                       CAR ;
                       ADD ;
                       COMPARE ;
                       LT ;
                       PUSH nat 0 ;
                       DUP 8 ;
                       GET 3 ;
                       GET 15 ;
                       COMPARE ;
                       GT ;
                       AND ;
                       IF { PUSH string "MIN_AMOUNT_NOT_MET" ; FAILWITH } {} ;
                       DUP 6 ;
                       GET 3 ;
                       GET 17 ;
                       DUP 3 ;
                       DUP 3 ;
                       CAR ;
                       ADD ;
                       COMPARE ;
                       GT ;
                       PUSH nat 0 ;
                       DUP 8 ;
                       GET 3 ;
                       GET 17 ;
                       COMPARE ;
                       GT ;
                       AND ;
                       IF { PUSH string "MAX_AMOUNT_EXCEEDED" ; FAILWITH } {} ;
                       DUP ;
                       DUP 3 ;
                       DIG 2 ;
                       CAR ;
                       ADD ;
                       UPDATE 1 ;
                       DUP ;
                       PUSH nat 100 ;
                       DUP 8 ;
                       GET 3 ;
                       GET 25 ;
                       DUP 5 ;
                       MUL ;
                       EDIV ;
                       IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                       CAR ;
                       DIG 2 ;
                       CDR ;
                       ADD ;
                       UPDATE 2 ;
                       DIG 5 ;
                       DUP ;
                       DUP ;
                       DUG 7 ;
                       GET 3 ;
                       DIG 3 ;
                       DIG 7 ;
                       GET 3 ;
                       GET 11 ;
                       ADD ;
                       UPDATE 11 ;
                       UPDATE 3 ;
                       DUP ;
                       GET 5 ;
                       DIG 2 ;
                       SOME ;
                       SENDER ;
                       UPDATE ;
                       UPDATE 5 ;
                       NIL operation ;
                       PUSH nat 0 ;
                       DUP 4 ;
                       COMPARE ;
                       GT ;
                       IF
                         { DUP 3 ;
                           DIG 4 ;
                           CAR ;
                           PAIR ;
                           SELF_ADDRESS ;
                           SENDER ;
                           PAIR ;
                           PAIR ;
                           DIG 5 ;
                           SWAP ;
                           EXEC ;
                           DIG 2 ;
                           DUP ;
                           DUP ;
                           DUG 4 ;
                           GET 3 ;
                           DUP 5 ;
                           GET 3 ;
                           GET 9 ;
                           DIG 6 ;
                           DIG 6 ;
                           DUP 8 ;
                           SWAP ;
                           GET 3 ;
                           GET 9 ;
                           SWAP ;
                           GET ;
                           IF_NONE { PUSH nat 0 } {} ;
                           ADD ;
                           DIG 6 ;
                           SWAP ;
                           SOME ;
                           SWAP ;
                           UPDATE ;
                           UPDATE 9 ;
                           UPDATE 3 ;
                           DUG 2 ;
                           CONS ;
                           PAIR }
                         { DIG 2 ; DIG 3 ; DIG 4 ; DIG 5 ; DROP 4 ; PAIR } } }
                 { DIG 3 ;
                   DIG 6 ;
                   DIG 7 ;
                   DROP 3 ;
                   IF_LEFT
                     { DIG 4 ;
                       DROP 2 ;
                       DUP ;
                       GET 3 ;
                       GET 19 ;
                       NOW ;
                       COMPARE ;
                       LT ;
                       IF { PUSH string "SALE_NOT_STARTED" ; FAILWITH } {} ;
                       DUP ;
                       GET 3 ;
                       GET 21 ;
                       NOW ;
                       COMPARE ;
                       GT ;
                       IF { PUSH string "SALE_ENDED" ; FAILWITH } {} ;
                       PUSH bool False ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       GET 3 ;
                       GET 28 ;
                       SENDER ;
                       MEM ;
                       COMPARE ;
                       EQ ;
                       PUSH bool True ;
                       DUP 3 ;
                       GET 3 ;
                       GET 27 ;
                       COMPARE ;
                       EQ ;
                       AND ;
                       IF { PUSH string "INVALID_BUYER" ; FAILWITH } {} ;
                       DUP ;
                       GET 3 ;
                       GET 13 ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       GET 3 ;
                       GET 11 ;
                       COMPARE ;
                       GE ;
                       IF { PUSH string "SOLD_OUT" ; FAILWITH } {} ;
                       PUSH mutez 0 ;
                       AMOUNT ;
                       COMPARE ;
                       LE ;
                       IF { PUSH string "INVALID_AMOUNT" ; FAILWITH } {} ;
                       DUP ;
                       GET 3 ;
                       GET 5 ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       GET 3 ;
                       GET 3 ;
                       AMOUNT ;
                       MUL ;
                       EDIV ;
                       IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                       CAR ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       GET 3 ;
                       GET 13 ;
                       DUP 3 ;
                       GET 3 ;
                       GET 11 ;
                       DUP 3 ;
                       ADD ;
                       COMPARE ;
                       GT ;
                       IF
                         { DROP ;
                           DUP ;
                           GET 3 ;
                           GET 11 ;
                           SWAP ;
                           DUP ;
                           DUG 2 ;
                           GET 3 ;
                           GET 13 ;
                           SUB ;
                           ABS ;
                           PUSH nat 1000000 ;
                           DUP 3 ;
                           GET 3 ;
                           GET 3 ;
                           DUP 4 ;
                           GET 3 ;
                           GET 5 ;
                           PUSH nat 1000000 ;
                           DUP 5 ;
                           MUL ;
                           MUL ;
                           EDIV ;
                           IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                           CAR ;
                           EDIV ;
                           IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                           CAR ;
                           AMOUNT ;
                           SUB ;
                           PAIR }
                         { PUSH mutez 0 ; PAIR } ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP 3 ;
                       SENDER ;
                       PAIR ;
                       DIG 5 ;
                       SWAP ;
                       EXEC ;
                       DUP 4 ;
                       GET 3 ;
                       GET 15 ;
                       DUP 3 ;
                       DUP 3 ;
                       CAR ;
                       ADD ;
                       COMPARE ;
                       LT ;
                       PUSH nat 0 ;
                       DUP 6 ;
                       GET 3 ;
                       GET 15 ;
                       COMPARE ;
                       GT ;
                       AND ;
                       IF { PUSH string "MIN_AMOUNT_NOT_MET" ; FAILWITH } {} ;
                       DUP 4 ;
                       GET 3 ;
                       GET 17 ;
                       DUP 3 ;
                       DUP 3 ;
                       CAR ;
                       ADD ;
                       COMPARE ;
                       GT ;
                       PUSH nat 0 ;
                       DUP 6 ;
                       GET 3 ;
                       GET 17 ;
                       COMPARE ;
                       GT ;
                       AND ;
                       IF { PUSH string "MAX_AMOUNT_EXCEEDED" ; FAILWITH } {} ;
                       DUP ;
                       DUP 3 ;
                       DIG 2 ;
                       CAR ;
                       ADD ;
                       UPDATE 1 ;
                       DUP ;
                       PUSH nat 100 ;
                       DUP 6 ;
                       GET 3 ;
                       GET 25 ;
                       DUP 5 ;
                       MUL ;
                       EDIV ;
                       IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                       CAR ;
                       DIG 2 ;
                       CDR ;
                       ADD ;
                       UPDATE 2 ;
                       DIG 3 ;
                       DUP ;
                       DUP ;
                       DUG 5 ;
                       GET 3 ;
                       DIG 3 ;
                       DIG 5 ;
                       GET 3 ;
                       GET 11 ;
                       ADD ;
                       UPDATE 11 ;
                       UPDATE 3 ;
                       DUP ;
                       GET 5 ;
                       DIG 2 ;
                       SOME ;
                       SENDER ;
                       UPDATE ;
                       UPDATE 5 ;
                       NIL operation ;
                       PUSH mutez 0 ;
                       DUP 4 ;
                       COMPARE ;
                       GT ;
                       IF
                         { DIG 2 ; SENDER ; PAIR ; DIG 3 ; SWAP ; EXEC ; CONS }
                         { DIG 2 ; DIG 3 ; DROP 2 } ;
                       PAIR }
                     { DIG 2 ;
                       DROP ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       DIG 4 ;
                       SWAP ;
                       EXEC ;
                       DROP ;
                       NIL (pair address (pair nat nat)) ;
                       DIG 2 ;
                       PAIR ;
                       SWAP ;
                       ITER { SWAP ;
                              PAIR ;
                              DUP ;
                              CAR ;
                              CDR ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              CAR ;
                              CAR ;
                              DIG 2 ;
                              CDR ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              PAIR ;
                              DUP 5 ;
                              SWAP ;
                              EXEC ;
                              PUSH nat 0 ;
                              SWAP ;
                              CAR ;
                              COMPARE ;
                              GT ;
                              IF
                                { SWAP ;
                                  DUP ;
                                  DUG 2 ;
                                  SWAP ;
                                  DUP ;
                                  DUG 2 ;
                                  PAIR ;
                                  DUP 5 ;
                                  SWAP ;
                                  EXEC ;
                                  DUP ;
                                  DUP ;
                                  DUG 2 ;
                                  CAR ;
                                  PAIR ;
                                  DUP 4 ;
                                  GET 3 ;
                                  GET 23 ;
                                  NOW ;
                                  COMPARE ;
                                  LT ;
                                  IF
                                    { SWAP ; DUP ; DUG 2 ; CDR ; DIG 2 ; CAR ; SUB ; ABS ; SWAP ; CDR ; SWAP ; PAIR }
                                    { SWAP ; PUSH nat 0 ; UPDATE 2 ; SWAP ; CAR ; PAIR } ;
                                  DUP ;
                                  CAR ;
                                  SWAP ;
                                  CDR ;
                                  DUP ;
                                  DUP 3 ;
                                  DIG 2 ;
                                  CAR ;
                                  SUB ;
                                  ABS ;
                                  UPDATE 1 ;
                                  DIG 4 ;
                                  DUP 4 ;
                                  DUP 6 ;
                                  GET 3 ;
                                  CAR ;
                                  GET 3 ;
                                  DIG 4 ;
                                  SWAP ;
                                  PAIR ;
                                  SWAP ;
                                  PAIR ;
                                  CONS ;
                                  DIG 3 ;
                                  DUP ;
                                  GET 5 ;
                                  DIG 3 ;
                                  DIG 4 ;
                                  SWAP ;
                                  SOME ;
                                  SWAP ;
                                  UPDATE ;
                                  UPDATE 5 ;
                                  PAIR }
                                { DROP ; PAIR } } ;
                       SWAP ;
                       DROP ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       GET 3 ;
                       CAR ;
                       SELF_ADDRESS ;
                       SWAP ;
                       CAR ;
                       CONTRACT %transfer (list (pair (address %from_)
                                                     (list %txs (pair (address %to_)
                                                                     (pair (nat %token_id)
                                                                           (nat %amount)))))) ;
                       IF_NONE { PUSH string "CANNOT_INVOKE_FA2_TRANSFER" ; FAILWITH } {} ;
                       PUSH mutez 0 ;
                       NIL (pair address (list (pair address (pair nat nat)))) ;
                       DIG 3 ;
                       DIG 4 ;
                       SWAP ;
                       PAIR ;
                       CONS ;
                       TRANSFER_TOKENS ;
                       SWAP ;
                       NIL operation ;
                       DIG 2 ;
                       CONS ;
                       PAIR } } }
             { DIG 2 ;
               DIG 3 ;
               DIG 4 ;
               DIG 7 ;
               DROP 4 ;
               IF_LEFT
                 { IF_LEFT
                     { SWAP ;
                       DUP ;
                       DUG 2 ;
                       DIG 3 ;
                       SWAP ;
                       EXEC ;
                       DROP ;
                       SWAP ;
                       DUP ;
                       DUP ;
                       DUG 3 ;
                       GET 3 ;
                       DIG 3 ;
                       GET 3 ;
                       GET 28 ;
                       DIG 3 ;
                       PUSH bool False ;
                       SWAP ;
                       UPDATE ;
                       UPDATE 28 ;
                       UPDATE 3 ;
                       SWAP ;
                       PAIR }
                     { SWAP ; DUP ; DUG 2 ; DIG 3 ; SWAP ; EXEC ; DROP ; UPDATE 6 ; SWAP ; PAIR } }
                 { IF_LEFT
                     { SWAP ; DUP ; DUG 2 ; DIG 3 ; SWAP ; EXEC ; DROP ; SWAP ; DUP ; GET 3 ; DIG 2 ; UPDATE 7 ; UPDATE 3 ; SWAP ; PAIR }
                     { SWAP ; DUP ; DUG 2 ; DIG 3 ; SWAP ; EXEC ; DROP ; SWAP ; DUP ; GET 3 ; DIG 2 ; UPDATE 23 ; UPDATE 3 ; SWAP ; PAIR } } } }
         { DIG 4 ;
           DROP ;
           IF_LEFT
             { DIG 2 ;
               DIG 3 ;
               DIG 6 ;
               DROP 3 ;
               IF_LEFT
                 { SWAP ;
                   DUP ;
                   DUG 2 ;
                   DIG 3 ;
                   SWAP ;
                   EXEC ;
                   DROP ;
                   SWAP ;
                   DUP ;
                   GET 3 ;
                   DUP 3 ;
                   CAR ;
                   UPDATE 1 ;
                   DUP 3 ;
                   GET 3 ;
                   UPDATE 3 ;
                   DUP 3 ;
                   GET 5 ;
                   UPDATE 5 ;
                   DUP 3 ;
                   GET 7 ;
                   UPDATE 13 ;
                   DUP 3 ;
                   GET 9 ;
                   UPDATE 15 ;
                   DUP 3 ;
                   GET 11 ;
                   UPDATE 17 ;
                   DUP 3 ;
                   GET 13 ;
                   UPDATE 19 ;
                   DUP 3 ;
                   GET 15 ;
                   UPDATE 21 ;
                   DIG 2 ;
                   GET 16 ;
                   UPDATE 25 ;
                   UPDATE 3 ;
                   SWAP ;
                   PAIR }
                 { SWAP ; DUP ; DUG 2 ; DIG 3 ; SWAP ; EXEC ; DROP ; SWAP ; DUP ; GET 3 ; DIG 2 ; UPDATE 27 ; UPDATE 3 ; SWAP ; PAIR } }
             { DIG 5 ;
               DROP ;
               SWAP ;
               DUP ;
               DUG 2 ;
               DIG 5 ;
               SWAP ;
               EXEC ;
               DROP ;
               SWAP ;
               DUP ;
               DUG 2 ;
               GET 3 ;
               GET 13 ;
               DUP 3 ;
               GET 3 ;
               GET 11 ;
               COMPARE ;
               LT ;
               DUP 3 ;
               GET 3 ;
               GET 21 ;
               NOW ;
               COMPARE ;
               LT ;
               AND ;
               IF { PUSH string "SALE_NOT_ENDED" ; FAILWITH } {} ;
               NIL operation ;
               PUSH mutez 0 ;
               BALANCE ;
               COMPARE ;
               GT ;
               IF { BALANCE ; DUP 3 ; PAIR ; DIG 4 ; SWAP ; EXEC ; CONS } { DIG 3 ; DROP } ;
               DUP 3 ;
               SWAP ;
               PAIR ;
               DIG 2 ;
               GET 3 ;
               GET 9 ;
               ITER { SWAP ;
                      PAIR ;
                      DUP ;
                      CAR ;
                      CDR ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      CAR ;
                      DUP 3 ;
                      CDR ;
                      CAR ;
                      DIG 3 ;
                      CDR ;
                      CDR ;
                      PUSH nat 0 ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      COMPARE ;
                      GT ;
                      IF
                        { DUP 4 ;
                          DUP 3 ;
                          PAIR ;
                          DUP 7 ;
                          SWAP ;
                          EXEC ;
                          CAR ;
                          PAIR ;
                          DUP 5 ;
                          SELF_ADDRESS ;
                          PAIR ;
                          PAIR ;
                          DUP 7 ;
                          SWAP ;
                          EXEC ;
                          DIG 3 ;
                          DUP ;
                          DUP ;
                          DUG 5 ;
                          GET 3 ;
                          DIG 5 ;
                          GET 3 ;
                          GET 9 ;
                          PUSH nat 0 ;
                          DIG 5 ;
                          SWAP ;
                          SOME ;
                          SWAP ;
                          UPDATE ;
                          UPDATE 9 ;
                          UPDATE 3 ;
                          DUG 2 ;
                          CONS ;
                          PAIR }
                        { DROP 2 ; PAIR } } ;
               DIG 2 ;
               DROP ;
               UNPAIR ;
               SWAP ;
               DUP ;
               DUG 2 ;
               GET 3 ;
               GET 13 ;
               DUP 3 ;
               GET 3 ;
               GET 11 ;
               COMPARE ;
               LT ;
               IF
                 { SWAP ;
                   DUP ;
                   DUG 2 ;
                   GET 3 ;
                   GET 11 ;
                   DUP 3 ;
                   GET 3 ;
                   GET 13 ;
                   SUB ;
                   ABS ;
                   DUP 3 ;
                   GET 3 ;
                   CAR ;
                   PAIR ;
                   DIG 3 ;
                   SELF_ADDRESS ;
                   PAIR ;
                   PAIR ;
                   DIG 3 ;
                   SWAP ;
                   EXEC ;
                   CONS }
                 { DIG 2 ; DIG 3 ; DROP 2 } ;
               PAIR } } }